{
  "name": "select-with-search",
  "type": "registry:ui",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "command",
    "popover"
  ],
  "files": [
    {
      "path": "ui/select-with-search.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { Check, ChevronsUpDown } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\n\r\ninterface SelectOption {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\ninterface SelectGroup {\r\n  label: string;\r\n  options: SelectOption[];\r\n}\r\n\r\ninterface SelectWithSearchProps {\r\n  options: (SelectOption | SelectGroup)[];\r\n  placeholder?: string;\r\n  value?: string;\r\n  onValueChange: (value: string) => void;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport function SelectWithSearch({\r\n  options,\r\n  placeholder = \"Select an option\",\r\n  value,\r\n  onValueChange,\r\n  disabled = false,\r\n}: SelectWithSearchProps) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const getCurrentLabel = React.useCallback(() => {\r\n    if (!options) return placeholder;\r\n    for (const item of options) {\r\n      if (\"options\" in item) {\r\n        const option = item.options.find((opt) => opt.value === value);\r\n        if (option) return option.label;\r\n      } else if (item.value === value) {\r\n        return item.label;\r\n      }\r\n    }\r\n    return placeholder;\r\n  }, [options, value, placeholder]);\r\n\r\n  const renderOptions = () => {\r\n    if (!options || options.length === 0) {\r\n      return <CommandEmpty>No options available.</CommandEmpty>;\r\n    }\r\n\r\n    return options.map((item, index) =>\r\n      \"options\" in item ? (\r\n        <CommandGroup key={index} heading={item.label}>\r\n          {item.options.map((option) => (\r\n            <CommandItem\r\n              key={option.value}\r\n              onSelect={() => {\r\n                onValueChange(option.value);\r\n                setOpen(false);\r\n              }}\r\n            >\r\n              <Check\r\n                className={cn(\r\n                  \"mr-2 h-4 w-4\",\r\n                  value === option.value ? \"opacity-100\" : \"opacity-0\"\r\n                )}\r\n              />\r\n              {option.label}\r\n            </CommandItem>\r\n          ))}\r\n        </CommandGroup>\r\n      ) : (\r\n        <CommandItem\r\n          key={item.value}\r\n          onSelect={() => {\r\n            onValueChange(item.value);\r\n            setOpen(false);\r\n          }}\r\n        >\r\n          <Check\r\n            className={cn(\r\n              \"mr-2 h-4 w-4\",\r\n              value === item.value ? \"opacity-100\" : \"opacity-0\"\r\n            )}\r\n          />\r\n          {item.label}\r\n        </CommandItem>\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Popover open={open} onOpenChange={setOpen}>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          role=\"combobox\"\r\n          aria-expanded={open}\r\n          className=\"w-full justify-between\"\r\n          disabled={disabled}\r\n        >\r\n          {getCurrentLabel()}\r\n          <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-full p-0\">\r\n        <Command>\r\n          <CommandInput\r\n            placeholder={`Search ${placeholder.toLowerCase()}...`}\r\n          />\r\n          {renderOptions()}\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}